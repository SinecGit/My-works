from loader import bot, logger
from telebot.types import Message, CallbackQuery
from telebot import types
from config_data.config import HISTORY_PERIOD
from states.states import all_user, set_user_id, Users
from main import UserBotDB


@bot.message_handler(commands=['history'])
def command_lowprice(message: Message) -> None:
    logger.info('–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: {}'.format(message.text))

    if message.chat.id not in all_user:
        set_user_id(message)

    all_user[message.chat.id].user_command = message.text[1:]

    ask_history(message)


def onkey_history(message: Message):
    ask_history(message)


def ask_history(message):

    keyboard_start = types.InlineKeyboardMarkup()

    key_day = types.InlineKeyboardButton(text='–ó–∞ –¥–µ–Ω—å', callback_data="key_day")
    key_week = types.InlineKeyboardButton(text='–ó–∞ –Ω–µ–¥–µ–ª—é', callback_data="key_week")
    key_month = types.InlineKeyboardButton(text='–ó–∞ –º–µ—Å—è—Ü', callback_data="key_month")
    key_all = types.InlineKeyboardButton(text='–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è', callback_data="key_all")

    keyboard_start.add(key_day, key_week, key_month, key_all)

    bot.send_message(message.chat.id, '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞?', reply_markup=keyboard_start)


@bot.callback_query_handler(func=lambda c: c.message.text == '–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≤–µ—Å—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞?')
def show_history(c: CallbackQuery) -> None:

    logger.info('–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏: {}'.format(c.data))

    bot.answer_callback_query(c.id)
    result = UserBotDB.get_records(c.message.chat.id, c.data)

    logger.debug('–ü–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}'.format(len(result)))

    bot.send_message(c.message.chat.id, '–ü–µ—Ä–∏–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏: {}'.format(HISTORY_PERIOD[c.data]))

    if UserBotDB.user_exists(c.message.chat.id):
        if result:
            bot.send_message(c.message.chat.id, '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞...')
            for i_idx, item in enumerate(result, 1):
                out_str = '*–ó–∞–ø–∏—Å—å: {}*\n\n'\
                          '–ö–æ–º–∞–Ω–¥–∞: *{}*\n' \
                          '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: *{}*\n'\
                          '–ú–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞: *{}*\n'\
                          '–ü–µ—Ä–∏–æ–¥: *c {} –ø–æ {}*\n'\
                          '–ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏:\n{}'.format(i_idx, item[3], item[4], item[6],
                                                        item[7].split('^')[0], item[7].split('^')[1],
                                                        ''.join(['üëâ {}. {}\n'.format(index, elem) for index, elem in
                                                        enumerate(item[5].split('^'), 1)]))

                bot.send_message(c.message.chat.id, out_str, parse_mode='Markdown', disable_web_page_preview=True)
            bot.send_message(c.message.chat.id, '–í—ã–≤–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.')
        else:
            bot.send_message(c.message.chat.id, '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥!'.format(c.message.chat.id))
    else:
        bot.send_message(c.message.chat.id, '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏!'.format(c.message.chat.id))
