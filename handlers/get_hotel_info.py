from loader import bot, logger
from telebot import types
from telebot.types import Message
from telegram_bot_calendar import DetailedTelegramCalendar
from states.states import RequestFindHotel, all_user
import datetime
from config_data import config
from utils.requests import search_location, is_number
from utils.print_hotels import get_fine_hotels, get_bestdeal_hotels
from keyboards.count_key import create_kb_count


def do_get_location(message) -> None:

    logger.info('–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é do_get_location')

    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞:')
    bot.set_state(message.from_user.id, RequestFindHotel.city_name, message.chat.id)


@bot.message_handler(state='*', commands=['stop'])
def get_city_name(message: Message) -> None:

    logger.info('–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ stop-–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞')

    bot.delete_state(message.from_user.id, message.chat.id)
    bot.send_message(message.chat.id, '–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.')


@bot.message_handler(state=RequestFindHotel.city_name)
def get_city_name(message: Message) -> None:

    logger.info('–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_city_name')

    if not message.text.isdigit():
        get_location(message)
    else:
        bot.send_message(message.chat.id, '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞:')


# –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
def get_location(message) -> None:

    logger.info('–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_location - –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É')
    logger.debug('–í–≤–µ–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: {}'.format(message.text))

    detail_location = search_location(message.text)
    kb = types.InlineKeyboardMarkup()

    if not detail_location:
        logger.info('> get_location - –£–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')

        bot.send_message(message.chat.id, '–£–∫–∞–∑–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥', reply_markup=kb)
        do_get_location(message)
    else:
        for kb_item in detail_location.items():
            if len(str(kb_item[0]+'='+kb_item[1]).encode('utf-8')) < 64:
                kb.add(types.InlineKeyboardButton(kb_item[0], callback_data=str(kb_item[0]+'='+kb_item[1])))

        bot.send_message(message.chat.id, 'üåç –£—Ç–æ—á–Ω–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞...', reply_markup=kb)


# –ó–∞–ø—Ä–æ—Å—ã –¥–∞—Ç –∑–∞–µ–∑–¥–∞ –∏ –≤—ã–µ–∑–¥–∞
def get_date_in(message) -> None:
    logger.info('–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_date_in')

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å')
    calendar, step = DetailedTelegramCalendar(min_date=datetime.date.today()).build()
    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ {config.STEPS[step]}', reply_markup=calendar)


def get_date_out(message) -> None:
    logger.info('–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_date_out')

    min_date = datetime.datetime.strptime(all_user[message.chat.id].date_in, "%Y-%m-%d").date()

    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è')
    calendar, step = DetailedTelegramCalendar(min_date=min_date).build()
    bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ {config.STEPS[step]}', reply_markup=calendar)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç–µ–ª–µ–π –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

def get_count_hotels(message) -> None:

    logger.info('–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_count_hotels')

    bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ?',
                     reply_markup=create_kb_count(config.SYSTEM_PARAM['max_limit_hotels'], step=2))


# –ó–∞–ø—Ä–æ—Å –æ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π
def get_photo(message) -> None:

    logger.info('–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_photo - –ó–∞–ø—Ä–æ—Å –æ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π')

    kb = types.InlineKeyboardMarkup()
    key_yes = types.InlineKeyboardButton(text='‚úÖ  –î–∞', callback_data='yes_photo')
    key_no = types.InlineKeyboardButton(text='‚ùå  –ù–µ—Ç', callback_data='no_photo')
    kb.add(key_yes, key_no)
    bot.send_message(message.chat.id, '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?', reply_markup=kb)


# –ó–∞–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ
def get_count_photo(message) -> None:

    logger.info('–í—Ö–æ–¥ –≤ —Ñ—É–Ω–∫—Ü–∏—é get_count_photo - –ó–∞–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ')

    bot.send_message(message.chat.id, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?',
                     reply_markup=create_kb_count(config.SYSTEM_PARAM['max_limit_photo'], step=2))


#-------------------------------------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query –∏ message_handler
#-------------------------------------------------------------------------------

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
@bot.callback_query_handler(func=lambda call: call.message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?')
def callback_set_hotels_count(call) -> None:
    bot.answer_callback_query(call.id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
    bot.edit_message_text('–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ: {}'.format(call.data), call.message.chat.id, call.message.id)
    all_user[call.message.chat.id].count_photo = int(call.data)

    logger.debug('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ñ–æ—Ç–æ: {}'.format(int(call.data)))

    if all_user[call.message.chat.id].user_command == 'bestdeal':
        bot.set_state(call.from_user.id, RequestFindHotel.min_price, call.message.chat.id)
        bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:')
    else:
        get_fine_hotels(call.message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫–∞–∑ —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π
@bot.callback_query_handler(func=lambda call: call.message.text == '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π?')
def callback_set_hotels_count(call) -> None:
    bot.answer_callback_query(call.id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)

    logger.debug('>callback_set_hotels_count - –ó–∞–ø—Ä–æ—Å –æ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ - –æ—Ç–≤–µ—Ç: {}'.format(call.data))

    if call.data == 'yes_photo':
        all_user[call.message.chat.id].photo = True
        call.data = '–î–∞'
        bot.edit_message_text('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ: {}'.format(call.data), call.message.chat.id, call.message.id)
        # –ó–∞–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π
        get_count_photo(call.message)
    else:
        all_user[call.message.chat.id].photo = False
        call.data = '–ù–µ—Ç'
        bot.edit_message_text('–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ: {}'.format(call.data), call.message.chat.id, call.message.id)

        if all_user[call.message.chat.id].user_command == 'bestdeal':
            bot.set_state(call.from_user.id, RequestFindHotel.min_price, call.message.chat.id)
            bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:')
        else:
            get_fine_hotels(call.message)


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –º–∞–∫—Å. –∏ –º–∏–Ω. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞ –Ω–æ–º–µ—Ä –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞
@bot.message_handler(state=RequestFindHotel.min_price)
def get_min_price(message: Message) -> None:
    logger.info('> get_min_price - –ó–∞–ø—Ä–æ—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞.')

    if message.text.isdigit() and int(message.text) >= 0:
        all_user[message.chat.id].price_min = int(message.text)
        bot.set_state(message.from_user.id, RequestFindHotel.max_price, message.chat.id)
        bot.send_message(message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {}'.format(message.text))
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:')
    else:
        bot.send_message(message.chat.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º –∏ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:')


@bot.message_handler(state=RequestFindHotel.max_price)
def get_max_price(message: Message) -> None:
    logger.info('> get_max_price - –ó–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞.')

    if message.text.isdigit() and int(message.text) >= all_user[message.chat.id].price_min:
        all_user[message.chat.id].price_max = int(message.text)
        bot.set_state(message.from_user.id, RequestFindHotel.min_distance, message.chat.id)
        bot.send_message(message.chat.id, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {}'.format(message.text))
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞, –∫–º:')
    else:
        bot.send_message(message.chat.id, '–°—Ç–æ–∏–º–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º –∏ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å:')


@bot.message_handler(state=RequestFindHotel.min_distance)
def get_min_distance(message: Message) -> None:
    logger.info('> get_min_distance - –ó–∞–ø—Ä–æ—Å –º–∏–Ω. –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–µ–ª—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.')

    if is_number(message.text) and float(message.text) >= 0:
        all_user[message.chat.id].distance_min = float(message.text)
        bot.set_state(message.from_user.id, RequestFindHotel.max_distance, message.chat.id)
        bot.send_message(message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: {} –∫–º'.format(message.text))
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞, –∫–º:')
    else:
        bot.send_message(message.chat.id, '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º –∏ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞, –∫–º:')


@bot.message_handler(state=RequestFindHotel.max_distance)
def get_max_distance(message: Message) -> None:
    logger.info('> get_max_distance - –ó–∞–ø—Ä–æ—Å –º–∞–∫—Å. –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç–µ–ª—è –æ—Ç —Ü–µ–Ω—Ç—Ä–∞.')

    if is_number(message.text) and float(message.text) >= all_user[message.chat.id].distance_min:
        all_user[message.chat.id].distance_max = float(message.text)
        bot.send_message(message.chat.id, '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞: {} –∫–º'.format(message.text))

        bot.set_state(message.from_user.id, RequestFindHotel.max_distance, message.chat.id)
        bot.delete_state(message.from_user.id, message.chat.id)
        # get_fine_hotels(message)
        get_bestdeal_hotels(message)
    else:
        bot.send_message(message.chat.id, '–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º –∏ –Ω–µ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ')
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞, –∫–º:')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
@bot.callback_query_handler(func=lambda call: call.message.text == '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –æ—Ç–µ–ª–µ–π –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ?')
def callback_set_hotels_count(call) -> None:
    logger.debug('>callback_set_hotels_count - –ö–æ–ª–∏—á. –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –æ—Ç–µ–ª–µ–π: {}'.format(call.data))
    bot.answer_callback_query(call.id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
    bot.edit_message_text('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –æ—Ç–µ–ª–µ–π: {}'.format(call.data),
                          call.message.chat.id, call.message.id)

    all_user[call.message.chat.id].count_hotels = int(call.data)
    # –ó–∞–ø—Ä–æ—Å –æ –ø–æ–∫–∞–∑–µ —Ñ–æ—Ç–æ –æ—Ç–µ–ª–µ–π (–î–∞/–ù–µ—Ç)
    get_photo(call.message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Ç–æ—á–Ω–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–º—É –≥–æ—Ä–æ–¥—É
@bot.callback_query_handler(func=lambda call: call.message.text == 'üåç –£—Ç–æ—á–Ω–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞...')
def callback_set_location(call) -> None:

    logger.debug('> callback_set_location - –º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞: {}'.format(call.data))

    bot.edit_message_reply_markup(call.message.chat.id, call.message.id, reply_markup=None)
    bot.edit_message_text('–ú–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞: {}'.format(call.data.split('=')[0]),
                          call.message.chat.id, call.message.id)

    bot.answer_callback_query(call.id)

    all_user[call.message.chat.id].city_name = call.data.split('=')[0].rstrip()
    all_user[call.message.chat.id].city_id = call.data.split('=')[1].rstrip()

    bot.set_state(call.from_user.id, RequestFindHotel.date_in, call.message.chat.id)

    # –ó–∞–ø—Ä–æ—Å –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –≤ –æ—Ç–µ–ª—å
    all_user[call.message.chat.id].date_in = ''
    all_user[call.message.chat.id].date_out = ''

    get_date_in(call.message)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@bot.callback_query_handler(func=DetailedTelegramCalendar.func())
def cal(c):
    if all_user[c.message.chat.id].date_in:
        min_date = datetime.datetime.strptime(all_user[c.message.chat.id].date_in, "%Y-%m-%d").date()
    else:
        min_date = datetime.date.today()

    result, key, step = DetailedTelegramCalendar(min_date=min_date, locale='ru').process(c.data)

    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {config.STEPS[step]}",
                              c.message.chat.id,
                              c.message.message_id,
                              reply_markup=key)
    elif result:

        bot.edit_message_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {result.strftime('%d-%m-%Y')}",
                              c.message.chat.id,
                              c.message.message_id)

        bot.answer_callback_query(c.id)

        if result:
            if all_user[c.message.chat.id].date_in:
                all_user[c.message.chat.id].date_out = str(result)
                logger.debug('>calendar - –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {}'.format(all_user[c.message.chat.id].date_out))

                get_count_hotels(c.message)
            else:
                all_user[c.message.chat.id].date_in = str(result)
                logger.debug('>calendar - –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {}'.format(all_user[c.message.chat.id].date_in))

                get_date_out(c.message)
